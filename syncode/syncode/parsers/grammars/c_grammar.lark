// Modified from https://github.com/ggerganov/llama.cpp/blob/master/grammars/c.gbnf

// ATTENTION: This grammar is WIP and does not cover most C syntax!

start: declaration*

declaration: data_type NAME "(" parameter? ")" "{" statement* "}"

statement: data_type NAME "=" expression ";" 
            | NAME  "="  expression ";" 
            | NAME  "(" arg_list? ")" ";" 
            | "return"  expression ";" 
            | "while" "(" condition ")" "{" statement* "}" 
            | "for" "(" for_init ";"  condition ";"  for_update ")" "{" statement* "}" 
            | "if" "(" condition ")" "{" statement* "}" ("else" "{" statement* "}")? 
            | single_line_comment 
            | multi_line_comment

data_type: "int" | "float"  | "char" | "void"
NAME: /[a-zA-Z_][a-zA-Z_0-9]*/

parameter: data_type NAME

for_init: data_type NAME  "="  expression | NAME  "="  expression
for_update: NAME  "="  expression

condition: expression relation_operator expression
relation_operator: ("<=" | "<" | "==" | "!=" | ">=" | ">")

expression: term (("+" | "-") term)*
term: factor(("*" | "/") factor)*

factor: NAME | number | unary_term | func_call | paren_expression
unary_term: "-" factor
func_call: NAME "(" arg_list? ")"
paren_expression: "("  expression  ")"

arg_list: expression (","  expression)*

number: /[0-9]+/

single_line_comment: /\/\/([^\n])*\n/ "\n"
multi_line_comment: /\/\*(.|\n)*?\*\//

WS : /[ \t\n]+/
%ignore WS
