task_specification: |
  You are an expert in solving grade school math tasks. You will be presented with a grade-school math word problem with symbolic variables and be asked to solve it.
parser_prompt:
  text: |
    Extract the final expression in the above response. The expression can be with variables and numbers and only has the following operations: +, -, /, //, %, (), and int(). Output the final answer expression exactly as is. DO NOT OUTPUT ANYTHING ELSE OTHER THAN THE FINAL ANSWER EXPRESSION!
  gsm: |
    Extract the final expression wrapped in [[START]] [[END]] from the above response. The expression can be with variables and numbers and only has the following operations: +, -, /, //, %, (), and int(). Output the final answer expression wrapped in [[START]] [[END]] exactly as is. DO NOT OUTPUT ANYTHING ELSE OTHER THAN THE FINAL ANSWER EXPRESSION!
std_instruct:
    text: |
      Only output the symbolic expression wrapped in [[START]] [[END]] that answers the question. The expression must use numbers as well as the variables defined in the question. You are only allowed to use the following operations: +, -, /, //, %, (), and int().

      You will always respond in the format described below: 
      [[START]]symbolic expression[[END]]

    gsm: |
      Only output the symbolic expression wrapped in [[START]] [[END]] that answers the question. The expression must use numbers as well as the variables defined in the question. You are only allowed to use the following operations: +, -, /, //, %, (), and int().

      You will always respond in the format described below: 
      [[START]]symbolic expression[[END]]

cot_instruct:
    text: |
      Before answering you should reason about the problem (using the <reasoning> field in the response described below). Intermediate symbolic expressions generated during reasoning should be wrapped in [[START]] [[END]].
      
      Then, output the symbolic expression wrapped in [[START]] [[END]] that answers the question. The expressions must use numbers as well as the variables defined in the question. You are only allowed to use the following operations: +, -, /, //, %, (), and int().

      You will always respond in the format described below: 
      Let's think step by step. <reasoning> The final answer is [[START]]symbolic expression[[END]]
    text-gsm: |
      Before answering you should reason about the problem (using the <reasoning> field in the response described below). Intermediate symbolic expressions generated during reasoning should be wrapped in [[START]] [[END]].
      
      Then, output the symbolic expression wrapped in [[START]] [[END]] that answers the question. The expressions must use numbers as well as the variables defined in the question. You are only allowed to use the following operations: +, -, /, //, %, (), and int().

      You will always respond in the format described below: 
      Let's think step by step. <reasoning> The final answer is [[START]]symbolic expression[[END]]
    gsm: |
      Before answering you should reason about the problem (using the <reasoning> field in the response described below). Intermediate symbolic expressions generated during reasoning should be wrapped in [[START]] [[END]].
      
      Then, output the symbolic expression wrapped in [[START]] [[END]] that answers the question. The expressions must use numbers as well as the variables defined in the question. You are only allowed to use the following operations: +, -, /, //, %, (), and int().

      You will always respond in the format described below: 
      Let's think step by step. <reasoning> The final answer is [[START]]symbolic expression[[END]]
fewshots:
  std:
    text:
      - question: "There are {t} trees in the {g}. {g} workers will plant trees in the {g} today. After they are done, there will be {tf} trees. How many trees did the {g} workers plant today?"
        response: "[[START]]tf - t[[END]]"

      - question: "If there are {c} cars in the parking lot and {nc} more cars arrive, how many cars are in the parking lot?"
        response: "[[START]]c + nc[[END]]"

      - question: "{p1} had {ch1} {o1} and {p2} had {ch2} {o1}. If they ate {a} {o1}, how many pieces do they have left in total?"
        response: "[[START]]ch1 + ch2 - a[[END]]"

      - question: "{p1} had {l1} {o1}. {p1} gave {g} {o1} to {p2}. How many {o1} does {p1} have left?"
        response: "[[START]]l1 - g[[END]]"

      - question: "{p1} has {t} {o1}. For Christmas, {p1} got {tm} {o1} from {p2} and {td} {o1} from {p3}. How many {o1} does {p1} have now?"
        response: "[[START]]t + tm + td[[END]]"

      - question: "There were {c} {o1} in the {loc}. {nc} more {o1} were installed each day, from {d1} to {d2}. How many {o1} are now in the {loc}?"
        response: "[[START]]c + nc * (d2 - d1 + 1)[[END]]"

      - question: "{p1} had {gb1} {o1}. On {day1}, {p1} lost {l1} {o1}. On {day2}, {p1} lost {l2} more. How many {o1} does {p1} have at the end of {day2}?"
        response: "[[START]]gb1 - l1 - l2[[END]]"

      - question: "{p1} has ${m}. {p1} bought {q} {o1} for ${p} each. How much money does {p1} have left?"
        response: "[[START]]m - q * p[[END]]"
    gsm:
      - question: "There are {t} trees in the {g}. {g} workers will plant trees in the {g} today. After they are done, there will be {tf} trees. How many trees did the {g} workers plant today?"
        response: "[[START]]tf - t[[END]]"

      - question: "If there are {c} cars in the parking lot and {nc} more cars arrive, how many cars are in the parking lot?"
        response: "[[START]]c + nc[[END]]"

      - question: "{p1} had {ch1} {o1} and {p2} had {ch2} {o1}. If they ate {a} {o1}, how many pieces do they have left in total?"
        response: "[[START]]ch1 + ch2 - a[[END]]"

      - question: "{p1} had {l1} {o1}. {p1} gave {g} {o1} to {p2}. How many {o1} does {p1} have left?"
        response: "[[START]]l1 - g[[END]]"

      - question: "{p1} has {t} {o1}. For Christmas, {p1} got {tm} {o1} from {p2} and {td} {o1} from {p3}. How many {o1} does {p1} have now?"
        response: "[[START]]t + tm + td[[END]]"

      - question: "There were {c} {o1} in the {loc}. {nc} more {o1} were installed each day, from {d1} to {d2}. How many {o1} are now in the {loc}?"
        response: "[[START]]c + nc * (d2 - d1 + 1)[[END]]"

      - question: "{p1} had {gb1} {o1}. On {day1}, {p1} lost {l1} {o1}. On {day2}, {p1} lost {l2} more. How many {o1} does {p1} have at the end of {day2}?"
        response: "[[START]]gb1 - l1 - l2[[END]]"

      - question: "{p1} has ${m}. {p1} bought {q} {o1} for ${p} each. How much money does {p1} have left?"
        response: "[[START]]m - q * p[[END]]" 
  cot:
    text:
      - question: "There are {t} trees in the {g}. {g} workers will plant trees in the {g} today. After they are done, there will be {tf} trees. How many trees did the {g} workers plant today?"
        response: "Let's think step by step. Initially, there are {t} trees. After planting, there are {tf} trees. The number of trees planted is [[START]]tf - t[[END]]. The final answer is [[START]]tf - t[[END]]."

      - question: "If there are {c} cars in the parking lot and {nc} more cars arrive, how many cars are in the parking lot?"
        response: "Let's think step by step. Initially, there are {c} cars. {nc} more cars arrive, so the total becomes [[START]]c + nc[[END]]. The final answer is [[START]]c + nc[[END]]."

      - question: "{p1} had {ch1} {o1} and {p2} had {ch2} {o1}. If they ate {a} {o1}, how many pieces do they have left in total?"
        response: "Let's think step by step. Initially, {p1} had {ch1} {o1}, and {p2} had {ch2} {o1}, making a total of [[START]]ch1 + ch2[[END]]. After eating {a} {o1}, the remaining total is [[START]]ch1 + ch2 - a[[END]]. The final answer is [[START]]ch1 + ch2 - a[[END]]."

      - question: "{p1} had {l1} {o1}. {p1} gave {g} {o1} to {p2}. How many {o1} does {p1} have left?"
        response: "Let's think step by step. {p1} started with {l1} {o1}. After giving {g} {o1} to {p2}, {p1} has [[START]]l1 - g[[END]] {o1} left. The final answer is [[START]]l1 - g[[END]]."

      - question: "{p1} has {t} {o1}. For Christmas, {p1} got {tm} {o1} from {p2} and {td} {o1} from {p3}. How many {o1} does {p1} have now?"
        response: "Let's think step by step. {p1} started with {t} {o1}. {p1} received {tm} {o1} from {p2} and {td} {o1} from {p3}. The total is [[START]]t + tm + td[[END]]. The final answer is [[START]]t + tm + td[[END]]."

      - question: "There were {c} {o1} in the server room. {nc} more {o1} were installed each day, from {d1} to {d2}. How many {o1} are now in the server room?"
        response: "Let's think step by step. Initially, there were {c} {o1}. {nc} {o1} were added each day for [[START]]d2 - d1 + 1[[END]] days, which is [[START]]nc * (d2 - d1 + 1)[[END]]. The total is [[START]]c + nc * (d2 - d1 + 1)[[END]]. The final answer is [[START]]c + nc * (d2 - d1 + 1)[[END]]."

      - question: "{p1} had {gb1} {o1}. On {day1}, {p1} lost {l1} {o1}. On {day2}, {p1} lost {l2} more. How many {o1} does {p1} have at the end of {day2}?"
        response: "Let's think step by step. Initially, {p1} had {gb1} {o1}. After losing {l1} {o1} on {day1}, {p1} had [[START]]gb1 - l1[[END]]. After losing {l2} {o1} on {day2}, the total is [[START]]gb1 - l1 - l2[[END]]. The final answer is [[START]]gb1 - l1 - l2[[END]]."

      - question: "{p1} has ${m}. {p1} bought {q} {o1} for ${p} each. How much money does {p1} have left?"
        response: "Let's think step by step. Initially, {p1} had ${m}. {p1} spent [[START]]q * p[[END]] on {q} {o1}. The remaining money is [[START]]m - q * p[[END]]. The final answer is [[START]]m - q * p[[END]]."
    text-gsm:
      - question: "There are {t} trees in the {g}. {g} workers will plant trees in the {g} today. After they are done, there will be {tf} trees. How many trees did the {g} workers plant today?"
        response: "Let's think step by step. Initially, there are {t} trees. After planting, there are {tf} trees. The number of trees planted is [[START]]tf - t[[END]]. The final answer is [[START]]tf - t[[END]]."

      - question: "If there are {c} cars in the parking lot and {nc} more cars arrive, how many cars are in the parking lot?"
        response: "Let's think step by step. Initially, there are {c} cars. {nc} more cars arrive, so the total becomes [[START]]c + nc[[END]]. The final answer is [[START]]c + nc[[END]]."

      - question: "{p1} had {ch1} {o1} and {p2} had {ch2} {o1}. If they ate {a} {o1}, how many pieces do they have left in total?"
        response: "Let's think step by step. Initially, {p1} had {ch1} {o1}, and {p2} had {ch2} {o1}, making a total of [[START]]ch1 + ch2[[END]]. After eating {a} {o1}, the remaining total is [[START]]ch1 + ch2 - a[[END]]. The final answer is [[START]]ch1 + ch2 - a[[END]]."

      - question: "{p1} had {l1} {o1}. {p1} gave {g} {o1} to {p2}. How many {o1} does {p1} have left?"
        response: "Let's think step by step. {p1} started with {l1} {o1}. After giving {g} {o1} to {p2}, {p1} has [[START]]l1 - g[[END]] {o1} left. The final answer is [[START]]l1 - g[[END]]."

      - question: "{p1} has {t} {o1}. For Christmas, {p1} got {tm} {o1} from {p2} and {td} {o1} from {p3}. How many {o1} does {p1} have now?"
        response: "Let's think step by step. {p1} started with {t} {o1}. {p1} received {tm} {o1} from {p2} and {td} {o1} from {p3}. The total is [[START]]t + tm + td[[END]]. The final answer is [[START]]t + tm + td[[END]]."

      - question: "There were {c} {o1} in the server room. {nc} more {o1} were installed each day, from {d1} to {d2}. How many {o1} are now in the server room?"
        response: "Let's think step by step. Initially, there were {c} {o1}. {nc} {o1} were added each day for [[START]]d2 - d1 + 1[[END]] days, which is [[START]]nc * (d2 - d1 + 1)[[END]]. The total is [[START]]c + nc * (d2 - d1 + 1)[[END]]. The final answer is [[START]]c + nc * (d2 - d1 + 1)[[END]]."

      - question: "{p1} had {gb1} {o1}. On {day1}, {p1} lost {l1} {o1}. On {day2}, {p1} lost {l2} more. How many {o1} does {p1} have at the end of {day2}?"
        response: "Let's think step by step. Initially, {p1} had {gb1} {o1}. After losing {l1} {o1} on {day1}, {p1} had [[START]]gb1 - l1[[END]]. After losing {l2} {o1} on {day2}, the total is [[START]]gb1 - l1 - l2[[END]]. The final answer is [[START]]gb1 - l1 - l2[[END]]."

      - question: "{p1} has ${m}. {p1} bought {q} {o1} for ${p} each. How much money does {p1} have left?"
        response: "Let's think step by step. Initially, {p1} had ${m}. {p1} spent [[START]]q * p[[END]] on {q} {o1}. The remaining money is [[START]]m - q * p[[END]]. The final answer is [[START]]m - q * p[[END]]."
    gsm:
      - question: "There are {t} trees in the {g}. {g} workers will plant trees in the {g} today. After they are done, there will be {tf} trees. How many trees did the {g} workers plant today?"
        response: "Let's think step by step. Initially, there are {t} trees. After planting, there are {tf} trees. The number of trees planted is [[START]]tf - t[[END]]. The final answer is [[START]]tf - t[[END]]."

      - question: "If there are {c} cars in the parking lot and {nc} more cars arrive, how many cars are in the parking lot?"
        response: "Let's think step by step. Initially, there are {c} cars. {nc} more cars arrive, so the total becomes [[START]]c + nc[[END]]. The final answer is [[START]]c + nc[[END]]."

      - question: "{p1} had {ch1} {o1} and {p2} had {ch2} {o1}. If they ate {a} {o1}, how many pieces do they have left in total?"
        response: "Let's think step by step. Initially, {p1} had {ch1} {o1}, and {p2} had {ch2} {o1}, making a total of [[START]]ch1 + ch2[[END]]. After eating {a} {o1}, the remaining total is [[START]]ch1 + ch2 - a[[END]]. The final answer is [[START]]ch1 + ch2 - a[[END]]."

      - question: "{p1} had {l1} {o1}. {p1} gave {g} {o1} to {p2}. How many {o1} does {p1} have left?"
        response: "Let's think step by step. {p1} started with {l1} {o1}. After giving {g} {o1} to {p2}, {p1} has [[START]]l1 - g[[END]] {o1} left. The final answer is [[START]]l1 - g[[END]]."

      - question: "{p1} has {t} {o1}. For Christmas, {p1} got {tm} {o1} from {p2} and {td} {o1} from {p3}. How many {o1} does {p1} have now?"
        response: "Let's think step by step. {p1} started with {t} {o1}. {p1} received {tm} {o1} from {p2} and {td} {o1} from {p3}. The total is [[START]]t + tm + td[[END]]. The final answer is [[START]]t + tm + td[[END]]."

      - question: "There were {c} {o1} in the server room. {nc} more {o1} were installed each day, from {d1} to {d2}. How many {o1} are now in the server room?"
        response: "Let's think step by step. Initially, there were {c} {o1}. {nc} {o1} were added each day for [[START]]d2 - d1 + 1[[END]] days, which is [[START]]nc * (d2 - d1 + 1)[[END]]. The total is [[START]]c + nc * (d2 - d1 + 1)[[END]]. The final answer is [[START]]c + nc * (d2 - d1 + 1)[[END]]."

      - question: "{p1} had {gb1} {o1}. On {day1}, {p1} lost {l1} {o1}. On {day2}, {p1} lost {l2} more. How many {o1} does {p1} have at the end of {day2}?"
        response: "Let's think step by step. Initially, {p1} had {gb1} {o1}. After losing {l1} {o1} on {day1}, {p1} had [[START]]gb1 - l1[[END]]. After losing {l2} {o1} on {day2}, the total is [[START]]gb1 - l1 - l2[[END]]. The final answer is [[START]]gb1 - l1 - l2[[END]]."

      - question: "{p1} has ${m}. {p1} bought {q} {o1} for ${p} each. How much money does {p1} have left?"
        response: "Let's think step by step. Initially, {p1} had ${m}. {p1} spent [[START]]q * p[[END]] on {q} {o1}. The remaining money is [[START]]m - q * p[[END]]. The final answer is [[START]]m - q * p[[END]]."